#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import IaaSService
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string get_auth(string u_name)'
  print '  string usercreatekeys(string username, string keyname)'
  print '  string userdelkeys(string username, string keyname)'
  print '  string querykeys(string username)'
  print '  string downloadkeys(string username, string keyname)'
  print '  string get_hostpool_info()'
  print '  string get_host_info(i32 host_id)'
  print '  string host_create(string host, string vmm)'
  print '  string host_delete(i32 host_id)'
  print '  string get_user_list()'
  print '  string user_create(string user)'
  print '  string user_delete(string user)'
  print '  string init_user(string user)'
  print '  string get_uid(string user)'
  print '  string get_imagepool_info(string user)'
  print '  string get_image_info(string user)'
  print '  string get_all_vmpool_info(string user)'
  print '  string get_vms_host(string host_name)'
  print '  string get_vmpool_info(string user, string flag)'
  print '  string get_vms_info(i32 flag, i32 template)'
  print '  string run_remote_command(string user, i32 vm_id, string command)'
  print '  string get_vm_status(i32 vm_id)'
  print '  string vm_action(string user, string action, i32 vm_id)'
  print '  string vm_create(string HVM)'
  print '  string vm_create_details(string user_name, i32 memory, i32 vcpu, string image_dir, i32 count, string userkey, string start, string duration, string meepo)'
  print '  string vm_delete(string user, i32 vm_id)'
  print '  string vm_destroy(string user, i32 vm_id)'
  print '  string vm_migrate(string user, i32 vm_id, i32 host_id, bool livemigration)'
  print '  string get_vm_info(i32 vm_id)'
  print '  string get_vm_lcm_status(i32 vm_id)'
  print '  string vm_sub(string auth, string CON_F)'
  print '  string vms_submit(string user, string CON_F, i32 num, string os)'
  print '  string get_vm_ipv6(i32 vmid)'
  print '  string get_vm_ip(i32 id)'
  print '  string get_ip_list(string user, string id_list)'
  print '  string get_image_detail(string user, string image_name)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = IaaSService.Client(protocol)
transport.open()

if cmd == 'get_auth':
  if len(args) != 1:
    print 'get_auth requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_auth(args[0],))

elif cmd == 'usercreatekeys':
  if len(args) != 2:
    print 'usercreatekeys requires 2 args'
    sys.exit(1)
  pp.pprint(client.usercreatekeys(args[0],args[1],))

elif cmd == 'userdelkeys':
  if len(args) != 2:
    print 'userdelkeys requires 2 args'
    sys.exit(1)
  pp.pprint(client.userdelkeys(args[0],args[1],))

elif cmd == 'querykeys':
  if len(args) != 1:
    print 'querykeys requires 1 args'
    sys.exit(1)
  pp.pprint(client.querykeys(args[0],))

elif cmd == 'downloadkeys':
  if len(args) != 2:
    print 'downloadkeys requires 2 args'
    sys.exit(1)
  pp.pprint(client.downloadkeys(args[0],args[1],))

elif cmd == 'get_hostpool_info':
  if len(args) != 0:
    print 'get_hostpool_info requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_hostpool_info())

elif cmd == 'get_host_info':
  if len(args) != 1:
    print 'get_host_info requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_host_info(eval(args[0]),))

elif cmd == 'host_create':
  if len(args) != 2:
    print 'host_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.host_create(args[0],args[1],))

elif cmd == 'host_delete':
  if len(args) != 1:
    print 'host_delete requires 1 args'
    sys.exit(1)
  pp.pprint(client.host_delete(eval(args[0]),))

elif cmd == 'get_user_list':
  if len(args) != 0:
    print 'get_user_list requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_user_list())

elif cmd == 'user_create':
  if len(args) != 1:
    print 'user_create requires 1 args'
    sys.exit(1)
  pp.pprint(client.user_create(args[0],))

elif cmd == 'user_delete':
  if len(args) != 1:
    print 'user_delete requires 1 args'
    sys.exit(1)
  pp.pprint(client.user_delete(args[0],))

elif cmd == 'init_user':
  if len(args) != 1:
    print 'init_user requires 1 args'
    sys.exit(1)
  pp.pprint(client.init_user(args[0],))

elif cmd == 'get_uid':
  if len(args) != 1:
    print 'get_uid requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_uid(args[0],))

elif cmd == 'get_imagepool_info':
  if len(args) != 1:
    print 'get_imagepool_info requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_imagepool_info(args[0],))

elif cmd == 'get_image_info':
  if len(args) != 1:
    print 'get_image_info requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_image_info(args[0],))

elif cmd == 'get_all_vmpool_info':
  if len(args) != 1:
    print 'get_all_vmpool_info requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_all_vmpool_info(args[0],))

elif cmd == 'get_vms_host':
  if len(args) != 1:
    print 'get_vms_host requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_vms_host(args[0],))

elif cmd == 'get_vmpool_info':
  if len(args) != 2:
    print 'get_vmpool_info requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_vmpool_info(args[0],args[1],))

elif cmd == 'get_vms_info':
  if len(args) != 2:
    print 'get_vms_info requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_vms_info(eval(args[0]),eval(args[1]),))

elif cmd == 'run_remote_command':
  if len(args) != 3:
    print 'run_remote_command requires 3 args'
    sys.exit(1)
  pp.pprint(client.run_remote_command(args[0],eval(args[1]),args[2],))

elif cmd == 'get_vm_status':
  if len(args) != 1:
    print 'get_vm_status requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_vm_status(eval(args[0]),))

elif cmd == 'vm_action':
  if len(args) != 3:
    print 'vm_action requires 3 args'
    sys.exit(1)
  pp.pprint(client.vm_action(args[0],args[1],eval(args[2]),))

elif cmd == 'vm_create':
  if len(args) != 1:
    print 'vm_create requires 1 args'
    sys.exit(1)
  pp.pprint(client.vm_create(args[0],))

elif cmd == 'vm_create_details':
  if len(args) != 9:
    print 'vm_create_details requires 9 args'
    sys.exit(1)
  pp.pprint(client.vm_create_details(args[0],eval(args[1]),eval(args[2]),args[3],eval(args[4]),args[5],args[6],args[7],args[8],))

elif cmd == 'vm_delete':
  if len(args) != 2:
    print 'vm_delete requires 2 args'
    sys.exit(1)
  pp.pprint(client.vm_delete(args[0],eval(args[1]),))

elif cmd == 'vm_destroy':
  if len(args) != 2:
    print 'vm_destroy requires 2 args'
    sys.exit(1)
  pp.pprint(client.vm_destroy(args[0],eval(args[1]),))

elif cmd == 'vm_migrate':
  if len(args) != 4:
    print 'vm_migrate requires 4 args'
    sys.exit(1)
  pp.pprint(client.vm_migrate(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'get_vm_info':
  if len(args) != 1:
    print 'get_vm_info requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_vm_info(eval(args[0]),))

elif cmd == 'get_vm_lcm_status':
  if len(args) != 1:
    print 'get_vm_lcm_status requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_vm_lcm_status(eval(args[0]),))

elif cmd == 'vm_sub':
  if len(args) != 2:
    print 'vm_sub requires 2 args'
    sys.exit(1)
  pp.pprint(client.vm_sub(args[0],args[1],))

elif cmd == 'vms_submit':
  if len(args) != 4:
    print 'vms_submit requires 4 args'
    sys.exit(1)
  pp.pprint(client.vms_submit(args[0],args[1],eval(args[2]),args[3],))

elif cmd == 'get_vm_ipv6':
  if len(args) != 1:
    print 'get_vm_ipv6 requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_vm_ipv6(eval(args[0]),))

elif cmd == 'get_vm_ip':
  if len(args) != 1:
    print 'get_vm_ip requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_vm_ip(eval(args[0]),))

elif cmd == 'get_ip_list':
  if len(args) != 2:
    print 'get_ip_list requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_ip_list(args[0],args[1],))

elif cmd == 'get_image_detail':
  if len(args) != 2:
    print 'get_image_detail requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_image_detail(args[0],args[1],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
